// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use Widget;

glib_wrapper! {
    pub struct Actionable(Interface<gtk_sys::GtkActionable>) @requires Widget, Buildable;

    match fn {
        get_type => || gtk_sys::gtk_actionable_get_type(),
    }
}

pub const NONE_ACTIONABLE: Option<&Actionable> = None;

pub trait ActionableExt: 'static {
    fn get_action_name(&self) -> Option<GString>;

    fn get_action_target_value(&self) -> Option<glib::Variant>;

    fn set_action_name(&self, action_name: Option<&str>);

    //fn set_action_target(&self, format_string: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    fn set_action_target_value(&self, target_value: Option<&glib::Variant>);

    fn set_detailed_action_name(&self, detailed_action_name: &str);

    fn connect_property_action_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Actionable>> ActionableExt for O {
    fn get_action_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_actionable_get_action_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_action_target_value(&self) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(gtk_sys::gtk_actionable_get_action_target_value(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_action_name(&self, action_name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_actionable_set_action_name(
                self.as_ref().to_glib_none().0,
                action_name.to_glib_none().0,
            );
        }
    }

    //fn set_action_target(&self, format_string: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call gtk_sys:gtk_actionable_set_action_target() }
    //}

    fn set_action_target_value(&self, target_value: Option<&glib::Variant>) {
        unsafe {
            gtk_sys::gtk_actionable_set_action_target_value(
                self.as_ref().to_glib_none().0,
                target_value.to_glib_none().0,
            );
        }
    }

    fn set_detailed_action_name(&self, detailed_action_name: &str) {
        unsafe {
            gtk_sys::gtk_actionable_set_detailed_action_name(
                self.as_ref().to_glib_none().0,
                detailed_action_name.to_glib_none().0,
            );
        }
    }

    fn connect_property_action_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_action_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkActionable,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Actionable>,
        {
            let f: &F = &*(f as *const F);
            f(&Actionable::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::action-name\0".as_ptr() as *const _,
                Some(transmute(notify_action_name_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Actionable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Actionable")
    }
}
