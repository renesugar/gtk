// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Orientation;

glib_wrapper! {
    pub struct Orientable(Interface<gtk_sys::GtkOrientable>);

    match fn {
        get_type => || gtk_sys::gtk_orientable_get_type(),
    }
}

pub const NONE_ORIENTABLE: Option<&Orientable> = None;

pub trait OrientableExt: 'static {
    fn get_orientation(&self) -> Orientation;

    fn set_orientation(&self, orientation: Orientation);

    fn connect_property_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Orientable>> OrientableExt for O {
    fn get_orientation(&self) -> Orientation {
        unsafe {
            from_glib(gtk_sys::gtk_orientable_get_orientation(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_orientation(&self, orientation: Orientation) {
        unsafe {
            gtk_sys::gtk_orientable_set_orientation(
                self.as_ref().to_glib_none().0,
                orientation.to_glib(),
            );
        }
    }

    fn connect_property_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_orientation_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkOrientable,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Orientable>,
        {
            let f: &F = &*(f as *const F);
            f(&Orientable::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::orientation\0".as_ptr() as *const _,
                Some(transmute(notify_orientation_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Orientable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Orientable")
    }
}
